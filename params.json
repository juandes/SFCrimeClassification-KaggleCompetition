{"name":"San Francisco Crime Classification - Kaggle Competition","tagline":"My attempt at the Kaggle competition \"San Francisco Crime Classification\"","body":"# San Francisco Crime Classification - a Kaggle Competition\r\n\r\n## Overview\r\n***\r\nThe \"San Francisco Crime Classification\" challenge, is a [Kaggle](http://kaggle.com/) competition \r\naimed to predict the category of the crimes that occurred in the city, given the time and location\r\nof the incident. \r\n\r\nIn this post, I explain and outline my first solution to this challenge.\r\n\r\nLink to the competition: [San Francisco Crime Classification](https://www.kaggle.com/c/sf-crime)\r\n\r\n### Learning method\r\n\r\nThe algorithm chosen for the implemented solution, is a \r\n[random forest](https://en.wikipedia.org/wiki/Random_forest), a \r\nlearning method used mostly for classification and regression.\r\n\r\n## Data\r\n***\r\nThe competition provides two dataset: a train data set and a test dataset. The\r\ntrain dataset is made of 878049 observations and the test dataset, of 884262\r\nobservations.\r\n\r\nBoth of them contains incidents from January 1, 2003 to May 13, 2015.\r\n\r\n### Data fields\r\n* Dates : timestamp of the crime incident.\r\n* Category: Category of the incident. Also, this is the variable we want to predict.\r\nThis variable is available only in the train dataset.\r\n* Descript: A short description of the incident. This variable is available only \r\nin the train dataset.\r\n* DayOfWeek: Day of the week where the incident occurred.\r\n* PdDistrict: Police Department District\r\n* Resolution: Outcome of the incident. This variable is available only in the \r\ntrain dataset.\r\n* Address: Address of the incident.\r\n* X: Longitude\r\n* Y: Latitude\r\n\r\n## Model development\r\n\r\nIn an attempt to produce a lower error rate, three random forests were created, using\r\nusing different predictors and number of trees. \r\n\r\nHere, they are presented in the same order they were created.\r\n\r\n#### Loading data and library\r\n\r\nThe first step is to load the random forest library, [_randomForest_](https://cran.r-project.org/web/packages/randomForest/randomForest.pdf),\r\nfollowed by loading both the train and test datasets.\r\n\r\nTo download the package, use this command:\r\n\r\n```r\r\ninstall.packages(\"randomForest\")\r\n```\r\n\r\n```r\r\nlibrary(randomForest)\r\nsetwd(\"~/path/to/working/directory\")\r\ntrain <- read.csv(\"~/path/to/working/directory/train.csv\")\r\ntest <- read.csv(\"~/path/to/working/directory/test.csv\")\r\n```\r\n\r\n#### Random forest model #1\r\n\r\n\r\nThe first model uses the day of the week ('DayOfWeek') and the police district\r\n('PdDistrict') as the predictors. The forest is made of 25 trees.\r\n\r\n```r\r\nrf <- randomForest(Category ~ DayOfWeek + PdDistrict, data = train, ntree = 25)\r\n``` \r\n\r\nThis model produced an average error rate of 77.95% (the error rate was calculated\r\nafter several tests).\r\n\r\n#### Random forest model #2\r\n\r\nFor the next model, a new column named 'Hour' was created. The value of this\r\nnew field is the hour (in 24h format) of the incident (taken from the 'Dates' column).\r\n\r\n```r\r\n# Make a new column containing the hour (24h format) of the crime\r\ntrain$Hour <- sapply(train$Dates, function(x) as.integer(strftime(x, format = \"%H\")))\r\n# Another random forest model using the same predictors as before, plus the hour of\r\n# the crime\r\nrf <- randomForest(Category ~ DayOfWeek + PdDistrict + Hour, data = train, ntree = 25)\r\n```\r\n\r\nThe average error rate is 77.53% (a small improvement from the previous one).\r\n\r\n#### Random forest model #3\r\n\r\nAs in the last model, this one also introduces a new column, 'TimeOfDay'. This new\r\nvariable has the time of the day (early morning, morning, afternoon and night) when\r\nthe incident occurred.\r\n\r\nTo create this new column, a custom function was created.\r\n\r\n```r\r\n# Function that returns the time of the day (early morning, morning, afternoon or\r\n# or night) according to the hour.\r\ntimeoftheday <- function(hour) {\r\n  if (hour >= 1 && hour <= 6) { return (as.factor(\"early morning\"))}\r\n  else if (hour >= 7 && hour <= 11) { return (as.factor(\"morning\"))}\r\n  else if (hour >= 12 && hour <= 19) { return (as.factor(\"afternoon\"))}\r\n  else return (as.factor(\"night\"))\r\n}\r\n```\r\n\r\n```r\r\ntrain$TimeOfDay <- sapply(train$Hour, timeoftheday)\r\nrf <- randomForest(Category ~ DayOfWeek + PdDistrict + TimeOfDay, data = train, ntree = 25) \r\n```\r\n\r\nAverage error rate of 77.97% (worse than the previous one).\r\n\r\nAfter realizing how similar the error rates were, my next step was to try to minimize the error rate\r\nof the second model because it is the one with the lowest error rate. However, even with a larger number\r\nof trees, the error rate was very similar. Although in several cases the model achieved an error rate\r\nlower than 77.53%, the time it took to train the model, was significantly larger.\r\n\r\n## Prediction stage and preparation of the output file\r\n\r\nOnce the model is trained, the next step is to apply the model to the test dataset\r\nto predict the category of the crime.\r\n\r\n```r\r\n# Add the hour column to the test set.\r\ntest$Hour <- sapply(test$Dates, function(x) as.integer(strftime(x, format = \"%H\")))\r\npredictions.result <- predict(rf, test)\r\n```\r\n\r\nThe last step is preparing the output file.\r\n\r\n```r\r\nresults.for.submission <- table(1:length(predictions.result), predictions.result)\r\nrownames(results.for.submission) <- 0:884261\r\nwrite.csv(results.for.submission, file = \"results.csv\")\r\n```\r\n\r\nUpload it to Kaggle!\r\n\r\n## Conclusion\r\n\r\nAs expected, the score I received from Kaggle was not that great (26.74064; #~350 in the leaderboard). \r\nMy plan for the next attempt is to play around with variables I left untouched this time and use \r\nanother classification model.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}